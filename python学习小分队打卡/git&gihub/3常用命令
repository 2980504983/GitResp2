add 和 commit:

    添加文件: add
    提交文件: commit

    展示:
        1先在仓库中创建一个文件
        2将文件提交到暂存区(git add 文件名.格式)
        3将暂存区内容提交到本地库(git commit -m "要写的注释内容" 文件名.格式)

    注：
    1 不放在本地仓库中的文件，git是不进行管理的
    2 即使放在本地仓库的文件，git也不管理，只有通过add和commit将文件提交到本地库git才会进行管理。


status:
    git status 查看工作区和暂存区的状态
    如果工作区里有文件就会显示 Untracked files(没有被追踪的文件): ...(红色字体的文件名)
    如果暂存区里有文件就会显示 be committed(可被提交): ...(绿色字体的文件名)
    如果文件在被提交后又进行修改了，会显示红色的文件名，并提示你在次add 和 commit
    再次提交后会显示几个文件被修改了，修改了几行


log:
    git log 查看当前库的修改日志
    commit 后面的是当时文件的索引，git信息是按键值对的方式存储的，这个索引就相当于键，通过这个
        就可以找到值也就是我们提交的文件信息
    当历史记录过多时，查看日志的时候，有分页效果(下一页：空格， 上一页：b， 退出：q)

    日志展示方式：
        方式一：git log（分页效果）
        方式二：git log --pretty=oneline （一行展示一条）
        方式三：git log --oneline （省略部分索引）
        方式四：git reflog （多了指针回到对应历史版本要走多少步）


reset:
    git reset --hard 索引值(省略版的) 前进或后退历史版本
    (hard: 意味着改变本地库的历史版本，暂存区和工作区也会同步改变)
    (mixed: 意味着改变本地库的历史版本，暂存区会改变，但是工作区不变)
    (soft: 意味着改变本地库的历史版本，暂存区和工作区都不变)


删除文件和找回本地库删除的文件:
    删除工作区的文件: rm 文件名.格式
    将删除操作同步到暂存区: git add 要同步删除的文件名.格式
    将删除操作同步到本地库: git commit -m "message" 文件名.格式
    找回本地库中删除的文件: 实际上就是将历史版本回滚到没删除时候的版本就好了
    恢复暂存区的文件: 因为文件已经上传了本地库直接在回滚一下就好了



diff:
    git diff 文件名.格式  比对工作区和暂存区中的文件
    (git是按行管理数据的，所以改变数据时是删除一行，再把新的一行写上去)
    git diff 不加文件名(比较工作区中和暂存区中所有的差异)
    git diff HEAD(表示当前版本的指针，也可以换成其它历史版本的索引) 文件名.格式

