# 题目一
# 题目1：作用域、类的方法与变量，模仿静态变量(static)另一案例（这一题需要去网上搜索，
# 理解静态变量）

# 方法一
# 这个方法里很明显可以看出全局变量和局部变量的区别，class dummy num 是局部变量，作用域仅限于这
# 这个类内，而global num 是全局变量作用域包括类内和类外
class Dummy:
    num = 1

    def num1(self):
        print('class dummy num:', self.num)
        print('global num: ', num)
        self.num += 1


n = Dummy()
num = 1
for i in range(5):
    num *= 10
    n.num1()


# 方法二
# 静态变量的定义：静态变量初始化只会被执行一次
# 在方法static里a就是一个静态变量，因为a的初始化只会被执行一次,而在no_static方法里a就不是一个
# 静态变量，因为每次遍历，a都会初始化
def static():
    a = 0
    for s in range(10):
        a += 1
    print(a)


def no_static():
    for s in range(10):
        a = 0
        a += 1
    print(a)


no_static()
static()


# -------------------------------------------------------------


# 题目2：矩阵相加，计算两个矩阵相加。

# 方法一
a2 = [[12, 7, 3],
      [4, 5, 6],
      [7, 8, 9]]

b2 = [[5, 8, 1],
      [6, 7, 3],
      [4, 5, 9]]

c2 = [[0, 0, 0],
      [0, 0, 0],
      [0, 0, 0]]
for i in range(len(c2)):
    for j in range(len(c2[0])):
        c2[i][j] = a2[i][j]+b2[i][j]
print(c2)


# --------------------------------------------------------------


# 题目3：统计 1 到 100 之和。

# 方法一
s3 = 0
for a in range(1, 101):
    s3 += a
print(s3)


# --------------------------------------------------------------


# 题目4：打破循环，求输入数字的平方，如果平方运算后小于 50 则退出。

# 方法一
while True:
    a4 = int(input('请输入数字：'))
    print(a4**2)
    if a4**2 <= 50:
        break


# -----------------------------------------------------------


# 题目5：函数交换变量，两个变量值用函数互换。

# 方法一
# 这里函数内部的变量值互换并不能影响函数外的x，y的值，还是需要在函数外进行变量值互换
def a5(a, b):
    a, b = b, a


x = 1
y = 0
a5(x, y)
x, y = y, x
print(f'x = {x}')
print(f'y = {y}')


# 方法二
# 这种方法，也是在函数外完成变量的值得交换的
def exc(a9, b9):
    return (b9, a9)


a8 = 0
b8 = 10
a8, b8 = exc(a8, b8)
print(a8, b8)


# -----------------------------------------------------------------


# 题目6：数字比大小，数字比较。

# 方法一
a6 = int(input('请输入要比较的第一个数字：'))
b6 = int(input('请输入要比较的第二个数字：'))

if a6 > b6:
    print(f"{a6} > {b6}")
elif a6 == b6:
    print("%d = %d" % (a6, b6))
else:
    print('{} < {}'.format(a6, b6))


# --------------------------------------------------------------------


# 题目7：使用lambda来创建匿名函数
# 匿名函数：
# 定义：python中用lambda关键字创建的匿名函数，所谓匿名就是这个函数没有名字，不是用def关键字
# 创建的标准函数
# 结构：lambda 参数1， 参数2， 参数3 : 表达式(表达式只能是一个)
# 举例：
test = lambda a7, b7: a7 + b7
print(test(3, 4))
