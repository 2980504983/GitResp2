"""
    存储引擎:
        定义:
            处理表的处理器(就是一个数据过来了,要怎么存,怎么查)
            
        基本操作:
            1 查看所有存储引擎:
                show engines;
                
            2 查看已有表的存储引擎:
                show create table 表名
                
            3 创建表指定引擎:
                略,用的少,一般用默认的
                
            4 已有表指定:
                略,因为各种存储引擎的结构是完全不一样的,所以在生产环境中也不能随意改
                存储引擎,如果数据量很大,你的内存和磁盘会疯狂读写
                (如果你老板叫你把他们的表的搜索引擎给改了,估计是想开你了)
                
        常见存储引擎及特点:
        
            1 InnoDB:
                1 mysql的默认存储引擎
                2 支持行级锁
                3 支持外键,事务,事务回滚
                4 表字段和索引同存储在一个文件中:
                    1 表名.frm : 存储表结构的文件
                    2 表名.ibd : 存储表记录及索引的文件 
                    
            2 MyISAM:
                1 支持表级锁
                2 表字段和索引分开存储:
                    1 表名.frm : 存储表结构的文件
                    2 表名.MYI : 存储索引的文件
                    3 表名.MYD : 存储表记录的文件
                    
            3 MEMORY:
                1 表记录存储在内存中,效率高
                2 但是一旦服务或主机重启,表记录就会清除
                
            如何选择存储引擎:
                1 执行查操作多的表用,【MyISAM(使用InnoDB更浪费资源)】这个不靠谱,还是要具体需求具体分析,实在
                  不知道用什么就用默认的也就是InnoDB

                2 执行写操作多的表用 InnoDB
                3 临时表 MEMORY(很少用) 被redis完美替代(redis很轻,)
            
    小tip:
        哈希:
            1 就是你给他一个不定长的数据,他能给你转化成一个定长的数据
            
            2 并且哈希不可逆,你要想破解,只能通过穷举(cmd5这个网站可以实现,
              但是一般公司数据还会加盐的,所以好像没啥用2333)
            
            3 被hash的数据有一点不一样,hash出来的结果就会有很大不同
            
            '1234343' -哈希-> 'sdfsadf'
            '1' -哈希-> 'asdfjsj'
            
            4 所以密码存数据库一般用char,因为密码肯定不能明文存入数据库，肯定要进行散列(也就是做hash),
              而散列出来的结果都是定长的,所以不需要varchar(回留空间存储字符长度),浪费空间,用char就可以了
              
              
              
            

"""